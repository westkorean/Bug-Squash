C++:
    Simple:
        Q1:
            Fix: Missing a ":" in your namespace resolution operator. This results in a compiler error.

            #include <iostream>

            int main() {
                std::cout << "Hello world!";
                return 0;
            }

        Q2:
            Fix: If only 5 expected, change <= 5 to < 5 (6 vs 5 iterations).

            #include <iostream>
            int main(){
                for (int i = 0; i < 5; i++) {
                    std::cout << i << " ";
                }
                return 0;
            }

    Intermediate:
        Q3:
            Fix: Declare x in the same scope as ptr, so that the memory it points to is still valid when you access it.

            #include <iostream>
            int main(){

            int x = 5;
            int* ptr = &x;
            std::cout << *ptr;
            }

        Q4:
            Fix: C++ arrays are zero-indexed. Always access indices from 0 to size - 1.
            #include <iostream>
            int main(){
                int* arr = new int[5];
                arr[4] = 10; 

                return 0;
            }
C:
    Simple:
        Q1: 
            Fix: #include <stdio.h> is required for using printf().
            #include <stdio.h>
            int main() {
                printf("Hi");
                return 0;
            }

        Q2:
            Fix: Use == to compare values, not assign.
            int x = 10;
            if (x == 5) {
                printf("True");
            }


    Intermediate:
        Q3:
            Fix: In C, local variables are not initialized automatically. Always initialize them before use.
            #include <stdio.h>

            int main(void){
                int x = 0;
                printf("%d\n", x);

                return 0;
            }
        Q4:
            Fix: Always allocate enough memory to hold the full string, including the null terminator.

            #include <stdio.h>

            int main(void){
                char str[50];
                strcpy(str, "Hello, world!");
            }
Java:
    Simple:
        Q1:
            Fix: String is a Java class and must begin with a capital S.
            public class Main {
            public static void main(String[] args) {
                String name = "John";
            }
        }

        Q2:
            Fix: The valid indices are 0, 1, and 2.
            public class Main {
                public static void main(String[] args) {
                    int[] nums = {1, 2, 3};
                    System.out.println(nums[2]);    // nums[0] and nums [1] work
                }
            }


    Intermediate:
        Q3:
            Fix: You must initialize the String before calling any methods on it.

            public class Main {
                public static void main(String[] args) {
                    String s = "hello";
                    System.out.println(s.length()); 
                }
            }

        Q4:
            Fix: Use the same method name and case when overriding, and add @Override for safety. This ensures proper runtime polymorphism.

            class Animal {
                void speak() {
                    System.out.println("Animal speaks");
                }
            }

            class Dog extends Animal {
                @Override
                void speak() {
                    System.out.println("Dog barks");
                }
            }

Python:
    Simple:
        Q1:
            Fix: The print must be indented inside the function block.
            def say_hi():
                print("Hi")


        Q2:
            Fix: Convert x to an integer before addition.
            x = "10"
            y = 5
            print(int(x) + y)


    Intermediate:
        Q3:
            Fix: Default to None and create a new list inside the function to avoid shared state between calls.

            def add_item(item, lst=None):
            if lst is None:
                lst = []
            lst.append(item)
            return lst

        Q4:
            Fix: Either declare x as global or pass it in as a parameter to avoid scope issues.

            x = 10
            def func():
                global x
                x = x + 5
                print(x)

            or

            def func(x):
                x = x + 5
                print(x)

            func(10)

